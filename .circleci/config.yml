
# # TOP >>>>>>>>>>>>>>>>>>>>>>>>>>>>>> CONFIG WIHTOUT Dockerfile <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
# # Use the latest 2.1 version of CircleCI pipeline process engine.
# # See: https://circleci.com/docs/configuration-reference
# version: 2.1

# # Define a job to be invoked later in a workflow.
# # See: https://circleci.com/docs/configuration-reference/#jobs
# jobs:
#   # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
#   selenium-hub-and-nodes:
#     # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
#     # See: https://circleci.com/docs/configuration-reference/#docker-machine-macos-windows-executor
#     # Be sure to update the tag on this image to a more stable version, using latest can result in unstable builds.
#     working_directory: ~/selenium
#     docker:
#       - image: mcr.microsoft.com/dotnet/sdk:8.0
#       # - image: cimg/base:2022.09
#       # - image: docker:20.10

#     # Add steps to the job
#     # See: https://circleci.com/docs/configuration-reference/#steps
#     steps:
#       # Checkout the code as the first step.
#       - setup_remote_docker:
#           docker_layer_caching: false
#       - checkout

#       - run:
#           name: "Say hello"
#           command: "echo $(ls)"

#       #  Install Docker Compose
#       - run:
#           name: Install Docker Compose
#           command: |
#             curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
#             chmod +x /usr/local/bin/docker-compose
#       # - run:
#       #     name: "Run Docker Compose"
#       #     command: docker-compose up --build

#       - run:
#           name: Build and Run Selenium TestResults
#           command: |
#             docker-compose up -d --build
#             docker-compose ps
#             sleep 30  # Wait for containers to start
#             dotnet test

#       - run:
#           name: Stop Selenium Hub Container
#           command: docker-compose down

#       # - run:
#       #     name: "Dotnet Checking"
#       #     command: "echo $(dotnet --version)"

# # Invoke jobs via workflows
# # See: https://circleci.com/docs/configuration-reference/#workflows
# workflows:
#   seleinium-c-sharp-circleci: # This is the name of the workflow, feel free to change it to better match your workflow.
#     # Inside the workflow, you define the jobs you want to run.
#     jobs:
#       - selenium-hub-and-nodes
#       # - tests:
#       #     requires:
#       #       - selenium-hub-and-nodes
# #  BOTTOM >>>>>>>>>>>>>>>>>>>>>>>>>>>>>> CONFIG WITHOUT Dockerfile <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


# TOP >>>>>>>>>>>>>>>>>>>>>>>>>>>>>> CONFIG WIH Dockerfile <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  selenium-hub-and-nodes:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#docker-machine-macos-windows-executor
    # Be sure to update the tag on this image to a more stable version, using latest can result in unstable builds.
    working_directory: ~/selenium
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:8.0
      # - image: cimg/base:2022.09
      # - image: docker:20.10

    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - setup_remote_docker:
          docker_layer_caching: false
      - checkout

      # - run:
      #     name: "Say hello"
      #     command: "echo $(ls)"

      # Install Docker
      - run:
          name: Install Docker
          command: |
            apt-get update
            apt-get -y install docker.io

      - run:
          name: Build Docker Image
          command: docker build -t selenium-tests -f Dockerfile .

      #  Install Docker Compose
      - run:
          name: Install Docker Compose
          command: |
            curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
      # - run:
      #     name: "Run Docker Compose"
      #     command: docker-compose up --build

      - run:
          name: Build and Run Selenium TestResults
          command: |
            docker-compose up -d --build
            docker-compose ps
            sleep 30  # Wait for containers to start
            dotnet test --filter UnitTest

      - run:
          name: Stop Selenium Hub Container
          command: docker-compose down

      # - run:
      #     name: "Dotnet Checking"
      #     command: "echo $(dotnet --version)"

# Invoke jobs via workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  seleinium-c-sharp-project: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - selenium-hub-and-nodes
      # - tests:
      #     requires:
      #       - selenium-hub-and-nodes
#  BOTTOM >>>>>>>>>>>>>>>>>>>>>>>>>>>>>> CONFIG WIHT Dockerfile <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
